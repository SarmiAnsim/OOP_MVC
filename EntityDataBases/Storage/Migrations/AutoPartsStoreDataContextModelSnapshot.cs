// <auto-generated />
using System;
using EntityDataBases.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityDataBases.Storage.Migrations
{
    [DbContext(typeof(AutoPartsStoreDataContext))]
    partial class AutoPartsStoreDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityDataBases.Storage.Entity.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnName("gManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnName("szManufacturerName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Year")
                        .HasColumnName("izYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("tblCarModel");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.CategoryParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tblCategoryParts");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfStorages")
                        .HasColumnName("izNumberOfWarehouses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tblCity");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("szCountry")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tblManufacturer");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnName("szClient")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Cost")
                        .HasColumnName("dcCost")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(25);

                    b.Property<int>("OrderNumber")
                        .HasColumnName("izOrderNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnName("dtOrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StorageAddress")
                        .IsRequired()
                        .HasColumnName("szStorageAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("StorageId")
                        .HasColumnName("gStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StorageNumber")
                        .HasColumnName("izStorageStorageNumber")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("tblOrder");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.OrdersParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberPartInOrder")
                        .HasColumnName("izNumberInOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnName("gOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnName("gPartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("tblOrdersParts");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarModelId")
                        .HasColumnName("gCarModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarModelName")
                        .IsRequired()
                        .HasColumnName("szCarModelName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("gCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("szCategoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Cost")
                        .HasColumnName("dcCost")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnName("szManufacturerName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("szName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tblPart");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("szAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("CityId")
                        .HasColumnName("gCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnName("szCityName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StorageNumber")
                        .HasColumnName("izStorageNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("tblStorage");
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.CarModel", b =>
                {
                    b.HasOne("EntityDataBases.Storage.Entity.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Order", b =>
                {
                    b.HasOne("EntityDataBases.Storage.Entity.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Part", b =>
                {
                    b.HasOne("EntityDataBases.Storage.Entity.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityDataBases.Storage.Entity.CategoryParts", "CategoryParts")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityDataBases.Storage.Entity.Storage", b =>
                {
                    b.HasOne("EntityDataBases.Storage.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
